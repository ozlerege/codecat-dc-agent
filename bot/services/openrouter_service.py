"""OpenRouter API integration layer."""

from __future__ import annotations

import json
import logging
from dataclasses import dataclass
from typing import Any

import httpx

from config import get_settings, require

logger = logging.getLogger(__name__)


class OpenRouterServiceError(RuntimeError):
    """Raised when OpenRouter API requests fail."""


@dataclass(slots=True)
class OpenRouterGeneratedChange:
    """Representation of a file change generated by OpenRouter."""

    path: str
    content: str
    action: str  # create, update, or delete


@dataclass(slots=True)
class OpenRouterService:
    """Client for interacting with the OpenRouter API."""

    client: httpx.AsyncClient

    @classmethod
    def create(cls) -> "OpenRouterService":
        """Construct the service with configuration defaults."""
        settings = get_settings()
        base_url = require(settings.openrouter_api_base_url, "OPENROUTER_API_BASE_URL")
        client = httpx.AsyncClient(base_url=base_url, timeout=120.0)
        return cls(client)

    async def aclose(self) -> None:
        """Close the underlying HTTP client."""
        await self.client.aclose()

    async def generate_code_changes(
        self,
        *,
        openrouter_api_key: str,
        model: str,
        task_description: str,
        repo: str,
        branch_name: str,
    ) -> list[OpenRouterGeneratedChange]:
        """
        Generate code changes using OpenRouter LLM.

        Args:
            openrouter_api_key: API key for OpenRouter
            model: Model identifier (e.g., "anthropic/claude-3.5-sonnet")
            task_description: Description of the task to perform
            repo: Repository name in format "owner/repo"
            branch_name: Target branch name

        Returns:
            List of file changes to apply

        Raises:
            OpenRouterServiceError: If the API request fails
        """
        require(openrouter_api_key, "OpenRouter API key")
        require(model, "Model")
        require(task_description, "Task description")

        headers = {
            "Authorization": f"Bearer {openrouter_api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/jules-discord-bot",
            "X-Title": "Jules Discord Bot",
        }

        system_prompt = """You are an expert code generation assistant. Your task is to generate code changes based on user requests.

IMPORTANT: You must respond with ONLY a valid JSON object in this exact format:
{
  "files": [
    {
      "path": "src/example.ts",
      "content": "// Full file content here",
      "action": "create"
    }
  ]
}

Rules:
- action must be one of: "create", "update", or "delete"
- For "create" and "update", provide the COMPLETE file content
- For "delete", content should be an empty string
- Use proper indentation and formatting
- Include all necessary imports
- Follow best practices for the language
- DO NOT include markdown code blocks or any text outside the JSON
- DO NOT include explanations or comments outside the JSON structure
"""

        user_prompt = f"""Repository: {repo}
Branch: {branch_name}
Task: {task_description}

Generate the necessary file changes to complete this task."""

        body = {
            "model": model,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt},
            ],
            "temperature": 0.7,
            "max_tokens": 8000,
        }

        logger.info(
            "Requesting code generation from OpenRouter with model %s for task: %s",
            model,
            task_description[:50],
        )

        try:
            response = await self.client.post(
                "/chat/completions",
                headers=headers,
                json=body,
            )
        except httpx.HTTPError as exc:
            logger.exception("Failed to call OpenRouter API: %s", exc)
            raise OpenRouterServiceError("Failed to call OpenRouter API") from exc

        if response.status_code >= 400:
            error_text = response.text
            logger.error(
                "OpenRouter API error (%d): %s", response.status_code, error_text
            )
            raise OpenRouterServiceError(
                f"OpenRouter API error ({response.status_code}): {error_text}"
            )

        try:
            data = response.json()
        except json.JSONDecodeError as exc:
            logger.exception("Failed to parse OpenRouter response as JSON")
            raise OpenRouterServiceError("Invalid JSON response from OpenRouter") from exc

        # Extract the generated content from OpenRouter response
        choices = data.get("choices", [])
        if not choices:
            raise OpenRouterServiceError("No choices returned from OpenRouter")

        message = choices[0].get("message", {})
        content = message.get("content", "")

        if not content:
            raise OpenRouterServiceError("Empty content returned from OpenRouter")

        # Parse the generated changes
        try:
            changes_data = json.loads(content)
        except json.JSONDecodeError as exc:
            # Try to extract JSON from markdown code block if present
            logger.warning("Failed to parse response as JSON, attempting to extract from markdown")
            if "```json" in content:
                try:
                    json_start = content.index("```json") + 7
                    json_end = content.index("```", json_start)
                    json_content = content[json_start:json_end].strip()
                    changes_data = json.loads(json_content)
                except (ValueError, json.JSONDecodeError) as extract_exc:
                    logger.exception("Failed to extract JSON from markdown")
                    raise OpenRouterServiceError(
                        "Failed to parse code changes from response"
                    ) from extract_exc
            else:
                logger.error("Response content: %s", content[:500])
                raise OpenRouterServiceError(
                    "Failed to parse code changes from response"
                ) from exc

        files = changes_data.get("files", [])
        if not files:
            raise OpenRouterServiceError("No files returned in generated changes")

        # Convert to our dataclass format
        changes = []
        for file_data in files:
            path = file_data.get("path")
            content = file_data.get("content", "")
            action = file_data.get("action", "update")

            if not path:
                logger.warning("Skipping file with missing path: %s", file_data)
                continue

            if action not in {"create", "update", "delete"}:
                logger.warning(
                    "Invalid action '%s' for file %s, defaulting to 'update'",
                    action,
                    path,
                )
                action = "update"

            changes.append(
                OpenRouterGeneratedChange(path=path, content=content, action=action)
            )

        logger.info("Generated %d file changes from OpenRouter", len(changes))
        return changes

